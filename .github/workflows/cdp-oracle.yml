name: CDP Oracle Tests

on:
  push:
    branches: [ main, cdp ]
    paths:
      - 'cdp-**'
      - 'scripts/**'
      - '.github/workflows/cdp-oracle.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'cdp-**'
      - 'scripts/**'
      - '.github/workflows/cdp-oracle.yml'
  workflow_dispatch:  # Allow manual trigger

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-cdp:
    name: Build CDP Oracle - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: true  # FAIL FAST - stop all jobs if any fail
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install build dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git
    
    - name: Install build dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # CMake should already be available on macOS runners
        which cmake || brew install cmake
    
    # Cache CDP build to speed up CI
    - name: Cache CDP build
      uses: actions/cache@v4
      with:
        path: |
          build/cdp
          build/cdp-install
        key: ${{ runner.os }}-cdp-${{ hashFiles('scripts/build-cdp.sh') }}
        restore-keys: |
          ${{ runner.os }}-cdp-
    
    - name: Build CDP from source
      run: |
        chmod +x scripts/build-cdp.sh
        make build-cdp
    
    - name: Verify CDP build
      run: |
        echo "CDP programs built:"
        ls -1 build/cdp-install/bin | wc -l
        echo ""
        echo "Testing housekeep:"
        build/cdp-install/bin/housekeep 2>&1 | head -1
    
    - name: Upload CDP binaries
      uses: actions/upload-artifact@v4
      with:
        name: cdp-binaries-${{ runner.os }}
        path: build/cdp-install/bin/
        retention-days: 7

  test-cdp-basic:
    name: CDP Basic Tests - ${{ matrix.os }}
    needs: build-cdp
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: true  # FAIL FAST - stop all jobs if any fail
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download CDP binaries
      uses: actions/download-artifact@v4
      with:
        name: cdp-binaries-${{ runner.os }}
        path: build/cdp-install/bin/
    
    - name: Make binaries executable
      run: chmod +x build/cdp-install/bin/*
    
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Run CDP test suite
      run: |
        chmod +x scripts/test-cdp.sh
        chmod +x scripts/generate-test-audio.py
        ./scripts/test-cdp.sh  # FAIL FAST on any test error
    
    - name: Upload test outputs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-outputs-${{ runner.os }}
        path: |
          test-output/*.wav
          test-output/*.ana
          test-output/*.txt

  oracle-comparison:
    name: Oracle Comparison Tests - ${{ matrix.os }}
    needs: build-cdp
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: true  # FAIL FAST - stop all jobs if any fail
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-oracle-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Download CDP binaries
      uses: actions/download-artifact@v4
      with:
        name: cdp-binaries-${{ runner.os }}
        path: build/cdp-install/bin/
    
    - name: Make binaries executable
      run: chmod +x build/cdp-install/bin/*
    
    - name: Build Rust implementations
      run: cargo build --workspace --release
    
    - name: Run oracle comparison tests
      run: |
        export CDP_PATH=$PWD/build/cdp-install/bin
        # Oracle tests would go here when implemented
        # cargo test --package cdp-oracle --features integration-tests
        echo "Oracle comparison tests will be added as Rust implementations are completed"
    
    - name: Compare outputs (example)
      run: |
        # Example comparison script (to be implemented)
        cat > compare_outputs.py << 'EOF'
        #!/usr/bin/env python3
        import sys
        import struct
        
        def compare_wav_files(file1, file2, tolerance=0.001):
            """Compare two WAV files for similarity"""
            with open(file1, 'rb') as f1, open(file2, 'rb') as f2:
                # Skip headers (44 bytes for simple WAV)
                f1.seek(44)
                f2.seek(44)
                
                samples_differ = 0
                total_samples = 0
                
                while True:
                    s1 = f1.read(2)
                    s2 = f2.read(2)
                    
                    if not s1 or not s2:
                        break
                    
                    v1 = struct.unpack('<h', s1)[0] / 32768.0
                    v2 = struct.unpack('<h', s2)[0] / 32768.0
                    
                    if abs(v1 - v2) > tolerance:
                        samples_differ += 1
                    total_samples += 1
                
                if total_samples > 0:
                    diff_percent = (samples_differ / total_samples) * 100
                    print(f"Files differ in {diff_percent:.2f}% of samples")
                    return diff_percent < 1.0  # Accept if less than 1% different
                return False
        
        if __name__ == "__main__":
            if len(sys.argv) == 3:
                result = compare_wav_files(sys.argv[1], sys.argv[2])
                sys.exit(0 if result else 1)
        EOF
        chmod +x compare_outputs.py
        echo "Comparison script created for future use"

  benchmark-vs-cdp:
    name: Performance Benchmark - ${{ matrix.os }}
    needs: [build-cdp, oracle-comparison]
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: true  # FAIL FAST - stop all jobs if any fail
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Download CDP binaries
      uses: actions/download-artifact@v4
      with:
        name: cdp-binaries-${{ runner.os }}
        path: build/cdp-install/bin/
    
    - name: Make binaries executable
      run: chmod +x build/cdp-install/bin/*
    
    - name: Run performance comparison
      run: |
        # Create benchmark script
        cat > benchmark.sh << 'EOF'
        #!/bin/bash
        echo "Performance comparison (to be implemented)"
        echo "Will compare:"
        echo "  - Processing speed"
        echo "  - Memory usage"
        echo "  - Accuracy"
        EOF
        chmod +x benchmark.sh
        ./benchmark.sh
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-${{ runner.os }}
        path: benchmark-results/

  summary:
    name: Test Summary
    needs: [test-cdp-basic, oracle-comparison]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Generate summary
      run: |
        echo "## CDP Oracle Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Build Status" >> $GITHUB_STEP_SUMMARY
        echo "| OS | CDP Programs |" >> $GITHUB_STEP_SUMMARY
        echo "|---|---|" >> $GITHUB_STEP_SUMMARY
        
        for os in Linux macOS; do
          if [ -d "artifacts/cdp-binaries-$os" ]; then
            count=$(ls -1 artifacts/cdp-binaries-$os | wc -l)
            echo "| $os | $count programs built |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| $os | Build failed |" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Outputs Generated" >> $GITHUB_STEP_SUMMARY
        echo "Audio files created during testing:" >> $GITHUB_STEP_SUMMARY
        find artifacts -name "*.wav" -o -name "*.ana" | wc -l || echo "0"