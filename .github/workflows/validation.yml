name: CDP Oracle Validation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: make fmt-check
    
    - name: Run clippy
      run: make ci-lint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run tests
      run: make ci-test
    
    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-outputs
        path: |
          target/debug/deps/
          **/*.wav

  check-frozen-modules:
    name: Check Frozen Modules
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check frozen modules unchanged
      run: |
        # List of frozen modules
        FROZEN_MODULES="cdp-core cdp-pvoc cdp-spectral"
        
        # Check if any frozen module was modified
        for module in $FROZEN_MODULES; do
          if git diff --name-only origin/main HEAD | grep -q "^$module/"; then
            echo "ERROR: Frozen module $module was modified!"
            echo "Frozen modules can only be changed with explicit approval."
            exit 1
          fi
        done
        
        echo "âœ“ All frozen modules unchanged"

  oracle-tests:
    name: Oracle Validation
    runs-on: ubuntu-latest
    needs: [test, check-frozen-modules]
    continue-on-error: true  # Don't fail the build if oracle tests fail
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git
    
    - name: Cache CDP build
      uses: actions/cache@v4
      with:
        path: |
          build/cdp
          build/cdp-install
        key: ${{ runner.os }}-cdp-${{ hashFiles('scripts/build-cdp.sh') }}
        restore-keys: |
          ${{ runner.os }}-cdp-
    
    - name: Build CDP from source
      run: |
        chmod +x scripts/build-cdp.sh
        make build-cdp || echo "CDP build failed - skipping oracle tests"
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run oracle validation tests
      run: |
        if [ -d "build/cdp-install/bin" ]; then
          chmod +x scripts/test-cdp-ci.sh
          ./scripts/test-cdp-ci.sh || echo "Some CDP tests failed"
          # Future: cargo test --package cdp-oracle --features integration-tests
        else
          echo "CDP not available - skipping oracle tests"
        fi

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run benchmarks
      run: make bench
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage
      run: make coverage || echo "Coverage generation failed"
    
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: target/coverage/