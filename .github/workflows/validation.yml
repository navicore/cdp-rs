name: CDP Oracle Validation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        components: rustfmt, clippy
        override: true
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: make fmt-check
    
    - name: Run clippy
      run: make ci-lint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run tests
      run: make ci-test
    
    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-outputs
        path: |
          target/debug/deps/
          **/*.wav

  check-frozen-modules:
    name: Check Frozen Modules
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Check frozen modules unchanged
      run: |
        # List of frozen modules
        FROZEN_MODULES="cdp-core cdp-pvoc cdp-spectral"
        
        # Check if any frozen module was modified
        for module in $FROZEN_MODULES; do
          if git diff --name-only origin/main HEAD | grep -q "^$module/"; then
            echo "ERROR: Frozen module $module was modified!"
            echo "Frozen modules can only be changed with explicit approval."
            exit 1
          fi
        done
        
        echo "âœ“ All frozen modules unchanged"

  oracle-tests:
    name: Oracle Validation
    runs-on: ubuntu-latest
    needs: [test, check-frozen-modules]
    continue-on-error: true  # Don't fail until CDP is available
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install CDP binaries
      run: |
        # Download CDP binaries (would need actual CDP release URL)
        # wget https://github.com/ComposersDesktop/CDP8/releases/...
        # tar -xzf cdp-binaries.tar.gz
        # export PATH=$PATH:$PWD/cdp/bin
        echo "CDP binary installation would go here"
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run oracle validation tests
      run: make oracle || echo "Oracle tests skipped (CDP not available)"

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run benchmarks
      run: make bench
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion/

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage
      run: make coverage || echo "Coverage generation failed"
    
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: target/coverage/